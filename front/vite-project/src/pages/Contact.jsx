// src/pages/Contact.jsx
/**
 * صفحه «تماس با ما»
 * --------------------------------------------------------------------
 * این کامپوننت یک صفحه‌ی ساده‌ی تماس را نمایش می‌دهد که شامل:
 *   1) عنوان و توضیح کوتاه
 *   2) اطلاعات تماس ثابت (ایمیل، تلفن، آدرس)
 *   3) یک فرم تماس ساده با فیلدهای نام، ایمیل، موضوع و متن پیام
 *
 * نکات مهم:
 * - در حال حاضر فرم «onSubmit» ندارد و رویداد submit را هندل نمی‌کند.
 *   یعنی اگر action مشخص نشود، مرورگر صفحه را مجدداً لود می‌کند.
 *   اگر قصد دارید بدون رفرش صفحه ارسال کنید، یک هندلر onSubmit اضافه کنید
 *   و در آن e.preventDefault() صدا بزنید و سپس با fetch/axios به API بفرستید.
 *
 * - ورودی‌ها «required» شده‌اند تا اعتبارسنجی پایه‌ی HTML انجام شود.
 *   برای اعتبارسنجی بیشتر (regex ایمیل، طول پیام و...) می‌توانید منطق اضافه کنید.
 *
 * - کلاس‌های CSS فرضی هستند (contact-page, contact-info, contact-form).
 *   استایل‌ها را در فایل‌های CSS یا با Tailwind/… تنظیم کنید.
 *
 * - چون زبان فارسی است، بهتر است جهت (dir="rtl") برای ظرف اصلی گذاشته شود.
 *   ایمیل در فرم ورودی از نوع email و به‌صورت LTR نمایش داده می‌شود.
 */

export default function Contact() {
  return (
    // جهت کلی صفحه راست به چپ
    <div className="contact-page" dir="rtl">
      {/* عنوان صفحه */}
      <h1>تماس با ما</h1>

      {/* توضیح کوتاه درباره‌ی هدف صفحه */}
      <p>خوشحال می‌شویم نظرات، پیشنهادات و سوالات خود را با ما در میان بگذارید.</p>

      {/* اطلاعات تماس ثابت (نمایشی) */}
      <div className="contact-info">
        {/* ایمیل پشتیبانی/ارتباط */}
        <p>📧 ایمیل: <a href="mailto:contact@zebin.ir">contact@zebin.ir</a></p>

        {/* شماره تلفن (استاتیک) */}
        <p>📞 تلفن: ۰۲۱-۱۲۳۴۵۶۷۸</p>

        {/* آدرس فیزیکی */}
        <p>📍 آدرس: تهران، خیابان آزادی، پلاک ۱۲۳</p>
      </div>

      {/*
        فرم تماس:
        - در این نسخه فرم هندلر ارسال ندارد (onSubmit تعریف نشده است).
        - اگر می‌خواهید بدون رفرش صفحه ارسال کنید:
          <form
            className="contact-form"
            onSubmit={(e) => {
              e.preventDefault();
              // 1) داده‌ها را از فیلدها بخوانید (ترجیحاً Controlled Components)
              // 2) با fetch/axios به API بک‌اند ارسال کنید
              // 3) نتیجه را به کاربر نمایش دهید (موفق/خطا)
            }}
          >
        - بهتر است برای دسترس‌پذیری از <label> برای هر input استفاده شود.
      */}
      <form className="contact-form">
        {/* نام (اجباری) */}
        <input
          type="text"
          placeholder="نام"
          required
          aria-label="نام"
        />

        {/* ایمیل (اجباری) — ورودی از نوع email تا مرورگر اعتبارسنجی کند */}
        <input
          type="email"
          placeholder="ایمیل"
          required
          aria-label="ایمیل"
          autoComplete="email"
          dir="ltr" // نمایش ایمیل چپ‌به‌راست
        />

        {/* موضوع (اختیاری) */}
        <input
          type="text"
          placeholder="موضوع"
          aria-label="موضوع"
        />

        {/* متن پیام (اجباری) */}
        <textarea
          placeholder="پیام خود را بنویسید..."
          required
          aria-label="متن پیام"
          rows={5} // ارتفاع بهتر برای تایپ متن‌های بلند
        />

        {/* دکمه‌ی ارسال — بدون onSubmit فعلاً باعث ارسال پیش‌فرض مرورگر می‌شود */}
        <button type="submit">ارسال</button>
      </form>
    </div>
  );
}
